<?xml version="1.0" encoding="ISO-8859-1" ?><pricefx-configuration>	<!-- NOTE: The commited version MUST be with QA system configuration !! -->	<!-- A logical name for this node -->	<nodeName>mstest</nodeName>		<!-- 	Setting this to false will enable additional sanity + security checks			i.e. authentication will always be required Calling this development_mode			and not production_mode to be on the safe side (default for non-configured			boolean values is false) 	-->	<developmentMode>false</developmentMode>		<!--	Sets the readonly mode of the entire JVM. If set to true no data modifications to the DB will be made.			This mode can also be set via the UI/API 	 -->	<readOnlyMode>false</readOnlyMode>		<!-- Disable authentication. Only available in dev mode -->	<authenticationDisabled>false</authenticationDisabled>		<!-- Disables authorization checks (roles).  Only available in dev mode -->	<authorizationDisabled>false</authorizationDisabled>		<!-- Enables initial bootstrapping of the application. Will be skipped if bootstrapping ran once, but can be disabled here as well -->	<allowBootstrap>true</allowBootstrap>		<!-- Default system locale (for error messages, etc) -->	<defaultLocale>en</defaultLocale>		<!-- A list of all available locales -->	<configuredLocales>en,de</configuredLocales>		<!-- The external URL this system is accessed from (e.g. used for links in workflow emails) -->	<baseURL>172.26.170.12</baseURL>		<!-- Allow the connection of a remote script debugger. Only available in dev mode  -->	<allowRemoteScriptDebugging>false</allowRemoteScriptDebugging>		<!-- Connection port for a remote script debugger -->	<rmiRegistryPort>1099</rmiRegistryPort>		<!-- 	This setting allows to enable different code blocks per node, i.e. to separate load or perform background work		  	only on non-user nodes		  	Note: The embedded Jetty will always start, so the usernode setting can only be disabled by not		  	specifying the particular node in Apache's proxy config		  			  	Currently existing server roles:		  	- UserNode (cannot be disabled here; listed just for completeness)		  	- ListProcessor		  	- EmailProcessor		  	- DatamartHost		  	- EventProcessor		  	- DatamartCalculationFlowProcessor		  	- CalculationSlave	-->	<serverRoles>UserNode,ListProcessor,EventProcessor,EmailProcessor,CalculationSlave</serverRoles>	<!-- This node to log events from all nodes in the cluster? 	     Note: must only have one event logger in the whole cluster! -->	<logEvents>true</logEvents>	<!-- If Jolokia is not not enabled, MBeans will be registerd on the MBeanlatformServer.	     This may be desirable in environments with traditional JMX integegraiton -->	<jolokia>		<enabled>true</enabled>	</jolokia>			<!-- Configuration entries for background processes -->	<backgroundWorkers>		<!-- Check interval for new tasks in ms -->		<pollingPeriod>60000</pollingPeriod>		<calculationWorker>			<!-- number of max background calculation threads per partition -->			<numberOfThreadsPerPartition>10</numberOfThreadsPerPartition>			</calculationWorker>	</backgroundWorkers>	<calculationTasks>		<commitBatchSize>200</commitBatchSize>	</calculationTasks>		<!--  Configuration values applicable if the node is a calculation slave --> 	<calculationSlave>		<!-- Number of maximum concurrent slave threads (global) -->		<maxSlaveThreads>5</maxSlaveThreads>		<!-- Backlog scheduling strategy. I.e. in which order are calculation requests processed if they cannot be served immediately?			 Possible values: FIFO, LIFO, RANDOM, NONE			 If NONE is selected the node does not accept backlogged threads -->		<schedulingStrategy>FIFO</schedulingStrategy>		<!-- Timeout in seconds when the queues are timedout -->		<requestQueueTimeoutSec>30</requestQueueTimeoutSec>		<responseQueueTimeoutSec>180</responseQueueTimeoutSec>	</calculationSlave>		<!-- Determines the number of entries the server processes in a in-memory list or switches to streaming mode -->	<maxNonStreamFetchSize>1000</maxNonStreamFetchSize>		<!-- The HTTP port that the backend listens to -->	<jetty>		<port>8001</port>	</jetty>		<!-- Outgoing email configuration -->	<email>		<!-- DNS or IP of outbound email smarthost -->		<smartHost>localhost</smartHost>		<!-- true is smart host requires a user name/password authentication -->		<authRequired>false</authRequired>		<username></username>		<password></password>				<!-- Port of smart host. Usually 25 SMTP -->		<port>25</port>				<!-- Transport layer type of email connection to smart host. Can be SSL or TLS. Default is PLAIN -->				<transport></transport>				<!-- Max number of email a thread sends per invokation -->		<batchSize>200</batchSize>				<!-- Retry period in seconds -->		<retryDelayInSecs>300</retryDelayInSecs>				<!-- System-wide email redirection. If value is set ALL emails go to this email instead -->		<redirectTo></redirectTo>				<!-- System wide email bcc. All emails will be bcc'ed to this address -->		<bcc></bcc>				<!-- From address and name of sent emails -->		<fromAddress>no-reply@media-saturn.com</fromAddress>		<fromName>Price f(x) MS Perf</fromName>	</email>		<!--  Outgoing Event processing options-->	<event>		<!-- Enable/Disable purgin of old (=no retries left) events -->		<purgeOldEvents>true</purgeOldEvents>				<!-- Controls how many days an old event is kept (if purging is active) depending on event state. Sucessful events are those that have been delivered with HTTP status 200 -->		<retainEventsInDays>			<successful>10</successful>			<failed>100</failed>		</retainEventsInDays>	</event>		<!-- Excel related configuration -->    <excel>    	<!-- Excel responses create a temp file when being constructed. Should this temp file be deleted afterwards? -->        <deleteTemplateAfterSerialization>true</deleteTemplateAfterSerialization>        <defaultDateFormatPattern>MM/dd/yyyy HH:mm:ss:SSS</defaultDateFormatPattern>                <!-- Temporary files directory -->        <tempDirectory>./temp</tempDirectory>                <!-- Default fallback template (if no partition specifc template is configured) -->        <templateFile>./template.xls</templateFile>                <!-- Excel client source file location -->        <client>./config/PriceFx_ExcelClient.xlsm</client>    </excel>        <!-- c3po connection pool configuration. See also http://www.mchange.com/projects/c3p0/-->	<c3p0>		<maxPoolSize>20</maxPoolSize>		<minPoolSize>5</minPoolSize>		<maxIdleTime>3000</maxIdleTime>        <maxAdministrativeTaskTime>0</maxAdministrativeTaskTime>		<idleConnectionTestPeriod>300</idleConnectionTestPeriod>	</c3p0>	   		<!-- boneCP connection pool configuration. See also http://jolbox.com/configuration.html-->	<!-- 	<bonecp>		<setIdleMaxAgeInMinutes>4</setIdleMaxAgeInMinutes>		<setIdleConnectionTestPeriodInMinutes>1</setIdleConnectionTestPeriodInMinutes>		<partitionCount>3</partitionCount>		<acquireIncrement>2</acquireIncrement>		<maxConnectionsPerPartition>10</maxConnectionsPerPartition>		<minConnectionsPerPartition>4</minConnectionsPerPartition>		<statementsCacheSize>50</statementsCacheSize>		<releaseHelperThreads>1</releaseHelperThreads>	</bonecp>	-->	<bonecp>		<idleMaxAgeInMinutes>4</idleMaxAgeInMinutes>		<idleConnectionTestPeriodInMinutes>1</idleConnectionTestPeriodInMinutes>		<partitionCount>3</partitionCount>		<acquireIncrement>2</acquireIncrement>		<maxConnectionsPerPartition>10</maxConnectionsPerPartition>		<minConnectionsPerPartition>4</minConnectionsPerPartition>        	<statementsCacheSize>50</statementsCacheSize>		<releaseHelperThreads>1</releaseHelperThreads>	</bonecp>		<!-- Use hibernate override configuration (only relevant in an Oracle setup) -->	<hibernateOverride>false</hibernateOverride>		<!-- Production systems will always skip anyway. But for multi-node dev instances it may be desirable that only one node performs schema updates -->	<hibernateSkipSchemaUpdate>false</hibernateSkipSchemaUpdate>		<!-- Hibernate configuration. See also http://docs.jboss.org/hibernate/core/4.3/manual/en-US/html/ -->	<hibernate>		<cache>			<region>				<!-- <factory_class>com.hazelcast.hibernate.HazelcastLocalCacheRegionFactory</factory_class>  -->				<factory_class>net.pricefx.core.hibernate.MultiTenantLocalCacheRegionFactory</factory_class>			</region>			<hazelcast>				<instance_name>default</instance_name>				<shutdown_on_session_factory_close>false</shutdown_on_session_factory_close>			</hazelcast>			<use_second_level_cache>true</use_second_level_cache>			<use_query_cache>true</use_query_cache>			<use_minimal_puts>true</use_minimal_puts>					</cache>		<connection>			<!-- NOTE: The commited version MUST be with QA system configuration !! -->			<!-- QA System config -->			<driver_class>com.mysql.jdbc.Driver</driver_class>			<url>jdbc:mysql://172.26.162.15/pricing_perf?characterEncoding=utf8&amp;rewriteBatchedStatements=true&amp;autoReconnect=true</url>			<username>pricing_perf</username>			<password>Otove7Ubas18</password>			<schema>pricing_perf</schema>			<!-- using BoneCP rather than C3P0 for JDBC4 support -->							<!-- <provider_class>org.hibernate.c3p0.internal.C3P0ConnectionProvider</provider_class> -->						<!-- Uncomment once BoneCP is fully compatible with latest Hibernate releases! -->			<!-- <provider_class>com.jolbox.bonecp.provider.BoneCPConnectionProvider</provider_class> -->			<provider_class>net.pricefx.core.hibernate.BoneCPConnectionProvider</provider_class>		</connection>			<current_session_context_class>thread</current_session_context_class>		<dialect>org.hibernate.dialect.MySQL5InnoDBDialect</dialect>		<generate_statistics>true</generate_statistics>		<!-- in production mode this setting will be ignored !!			 we do not allow any auto schema updates in production mode. 			 THEY NEED TO BE MANUAL -->		<hbm2ddl>						<auto>update</auto>		</hbm2ddl>		<id>			<new_generator_mappings>true</new_generator_mappings>		</id>		<jdbc>			<batch_size>50</batch_size>			<batch_versioned_data>true</batch_versioned_data>		</jdbc>		<order_updates>true</order_updates>		<show_sql>false</show_sql>	</hibernate>		<!-- package path for domain classes. Do not change. -->	<domainClassesPaths>		net.pricefx.domain			</domainClassesPaths>		<!-- Configuration settings for main formula angine -->	<formulaEngine>		<!-- Engine class. Do not change -->		<engine>net.pricefx.formulaengine.DefaultFormulaEngine</engine>				<!-- Formulas can be auto-dumped to file upon saving. E.g. for audit tracking -->		<dumpFormulasFolder>config/formulas</dumpFormulasFolder>		<dumpFormulas>false</dumpFormulas>				<!-- Size of LRU cache for formula objects (e.g. VLookup values etc) -->		<cacheSize>50000</cacheSize>				<!-- Sandbox limitations for groovy scrips -->		<script>			<!-- max object instances a script can create--><maxInstances>500</maxInstances><!-- max seconds a script can run before timeout interrupt occurs--><timeoutInSec>900</timeoutInSec>				</script>	</formulaEngine>		<!-- Password checking service implementation -->	<passwordService>net.pricefx.service.impl.PasswordServiceImpl</passwordService>		<!-- Request dispatcher options -->	<commandDispatcher>		<!-- Package path of request handlers. Do not change -->		<commandsPath>net.pricefx.server.commands</commandsPath>				<!-- Request interceptors -->		<interceptors>			net.pricefx.server.interceptors.AuditInterceptor,net.pricefx.server.interceptors.AuthorizationInterceptor,net.pricefx.server.interceptors.ReadOnlyModeInterceptor		</interceptors>	</commandDispatcher>		<!-- Known currency configuration -->	<currency>		<pathToDefault>config/ISOCurrencies.json</pathToDefault>		<defaultBaseCurrencyCode>EUR</defaultBaseCurrencyCode>	</currency>		<!-- UOM configuration -->	<unitOfMeasure>		<defaultBaseUOMCode>EA</defaultBaseUOMCode>	</unitOfMeasure>		<!-- Filearea configuration. Currently not used. Do not change -->	<filespace>		<rootPath>/home/customers</rootPath>		<spaceSuffix>filearea/upload</spaceSuffix>		<uploadScript>/home/ops/bin/process-uploadfile</uploadScript>	</filespace>	<datamart>		<database>			<type>LUCIDDB</type>			<driver_class>!---PARAMETER_NOT_FOUND_IN_CMDB----!</driver_class>			<url>jdbc:luciddb:</url>			<skipBootstrapping>false</skipBootstrapping>			<system>				<serverHttpPort>8037</serverHttpPort>				<cachePagesMax>60000</cachePagesMax>				<cachePagesInit>60000</cachePagesInit>				<tempInitSize>1000</tempInitSize>				<codeCacheMaxBytes>20000000</codeCacheMaxBytes>				<prefetchPagesMax>100</prefetchPagesMax>				<databaseIncrementSize>1000</databaseIncrementSize>				<databaseTxnLogInitSize>20000</databaseTxnLogInitSize>				<databaseTxnLogIncrementSize>1000</databaseTxnLogIncrementSize>				<databaseShadowLogInitSize>20000</databaseShadowLogInitSize>				<databaseShadowLogIncrementSize>20000</databaseShadowLogIncrementSize>				<tempIncrementSize>1000</tempIncrementSize>				<expectedConcurrentStatements>4</expectedConcurrentStatements>				<cacheReservePercentage>5</cacheReservePercentage>				<deviceSchedulerType>!---PARAMETER_NOT_FOUND_IN_CMDB----!</deviceSchedulerType>			</system>			<backup>				<destination>/www/pricing/backup</destination>			</backup>		</database>		<schema>			<pathToSchemasFolder>config/schemas</pathToSchemasFolder>		</schema>				<!-- PA data load paramaters -->		<dataLoad>			<!-- Max number of rows that can be loaded in a single batch (datamart.loaddata request)  -->			<maxRowsPerBatch>65535</maxRowsPerBatch>						<!-- Max batch size used by data load clients when splitting up large files before upload to Price f(x) -->			<maxRowsPerDataChunk>5000</maxRowsPerDataChunk>		</dataLoad>		<persistence>			<rowDeleteBatchSize>5000</rowDeleteBatchSize>			<logSQL>true</logSQL>		</persistence>		<discretization>			<resolution>10000</resolution>			<maxPointsPerDimUnit>2</maxPointsPerDimUnit>			<maxLabelsInSummary>5</maxLabelsInSummary>		</discretization>		<query>			<!-- Enable/disable local query result cache on a non-PA node -->			<resultCacheEnabled>true</resultCacheEnabled>						<!-- Max nummbers of rows in an internal query result, i.e. before any post-processing (for example discretization) -->			<internalRowLimit>500000</internalRowLimit>						<!-- Max nummbers of rows in the result set returned to the client; this includes a client requested export to Excel -->			<externalRowsLimit>500000</externalRowsLimit>			<!-- Max nummbers of rows in a fetch response -->			<fetchRowLimit>100</fetchRowLimit>					</query>	</datamart>			</pricefx-configuration>